name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pytest pytest-cov isort

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports

    - name: Format check with black
      run: |
        black --check . --line-length=88 --target-version=py39

    - name: Import sorting check with isort
      run: |
        isort --check-only . --profile=black --line-length=88

    - name: Test with pytest
      run: |
        python test_gateway.py

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Security scan with safety
      run: |
        safety check --json --output safety-report.json || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t meshtopo:latest .

    - name: Test Docker image
      run: |
        docker run --rm meshtopo:latest python test_gateway.py

    - name: Login to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      if: github.event_name == 'push'
      run: |
        docker tag meshtopo:latest ${{ secrets.DOCKER_USERNAME }}/meshtopo:latest
        docker tag meshtopo:latest ${{ secrets.DOCKER_USERNAME }}/meshtopo:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/meshtopo:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/meshtopo:${{ github.sha }}
