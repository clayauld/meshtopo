name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Install pre-commit
      run: |
        pip install pre-commit

    - name: Install pre-commit hooks
      run: |
        pre-commit install-hooks

    - name: Run pre-commit
      run: |
        pre-commit run --all-files

    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --tb=short

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Security scan with safety
      run: |
        safety scan --output json > safety-report.json || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push meshtopo-gateway image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
          ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        labels: |
          org.opencontainers.image.title=Meshtopo Gateway
          org.opencontainers.image.description=Core Meshtopo gateway service for MQTT and CalTopo integration
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

    - name: Test Docker images
      run: |
        # Build test image
        docker build --target test -t meshtopo-test:${{ github.sha }} .
        # Run tests in test image
        docker run --rm meshtopo-test:${{ github.sha }}
        # Test production image startup (smoke test)
        docker run --rm --name meshtopo-smoke-test ghcr.io/${{ github.repository }}:${{ github.sha }} python -c "import src.gateway; print('Production image imports successfully')" &
        sleep 5
        docker stop meshtopo-smoke-test || true
