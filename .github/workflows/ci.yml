name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-web.txt
        pip install black flake8 mypy pytest pytest-cov isort

    - name: Install type stubs
      run: |
        pip install types-requests types-PyYAML types-bcrypt

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy .

    - name: Format check with black
      run: |
        black --check . --line-length=88 --target-version=py39

    - name: Import sorting check with isort
      run: |
        isort --check-only . --profile=black --line-length=88

    - name: Test with pytest
      run: |
        python src/test_gateway.py
        python -c "from src.web_ui.utils.password import hash_password, verify_password; print('Password utilities test passed')"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-web.txt
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Security scan with safety
      run: |
        safety check --json --output safety-report.json || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker build -t meshtopo:latest -f deploy/Dockerfile .
        docker build -t meshtopo-web:latest -f deploy/Dockerfile.web .

    - name: Test Docker images
      run: |
        docker run --rm meshtopo:latest python src/test_gateway.py
        docker run --rm meshtopo-web:latest python -c "from src.web_ui.utils.password import hash_password; print('Web UI password utilities test passed')"

    - name: Login to GitHub Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker images
      if: github.event_name == 'push'
      run: |
        docker tag meshtopo:latest ghcr.io/${{ github.repository }}:latest
        docker tag meshtopo:latest ghcr.io/${{ github.repository }}:${{ github.sha }}
        docker tag meshtopo-web:latest ghcr.io/${{ github.repository }}-web:latest
        docker tag meshtopo-web:latest ghcr.io/${{ github.repository }}-web:${{ github.sha }}
        docker push ghcr.io/${{ github.repository }}:latest
        docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
        docker push ghcr.io/${{ github.repository }}-web:latest
        docker push ghcr.io/${{ github.repository }}-web:${{ github.sha }}
